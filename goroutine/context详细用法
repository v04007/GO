package main

import (
	"context"
	"fmt"
	"sync"
	"time"
)

var wg sync.WaitGroup

func gen(ctx context.Context) <-chan int {
	dst := make(chan int)
	n := 1
	go func() {
		for {
			select {
			case <-ctx.Done():
				return
			case dst <- n:
				n++
			}
		}
	}()
	return dst
}
func WithCancel() {
	ctx, cancel := context.WithCancel(context.Background())
	defer cancel()
	for n := range gen(ctx) {
		fmt.Println(n)
		if n == 5 {
			break
		}
	}
}

func WithDeadline() {
	d := time.Now().Add(time.Millisecond * 1000)
	fmt.Println(d)
	ctx, cancel := context.WithDeadline(context.Background(), d)
	defer cancel()

	select {
	case <-ctx.Done():
		fmt.Println(ctx.Err())
	case <-time.After(2 * time.Second):
		fmt.Println("执行了")
	}
}

func worker(ctx context.Context) {
LOOP:
	for {
		fmt.Println("connenttime ...")
		time.Sleep(time.Millisecond * 10)
		select {
		case <-ctx.Done():
			break LOOP
		default:
		}
	}
	fmt.Println("worker ...")
	wg.Done()
}
func WithTimeout() {
	ctx, cancel := context.WithTimeout(context.Background(), time.Millisecond*50)
	wg.Add(1)
	go worker(ctx)
	time.Sleep(time.Second * 5)
	cancel()
	wg.Wait()
	fmt.Println("over")
}

type TractCood string

func valWorker(ctx context.Context) {
	key := TractCood("TRACE_CODE")
	tractcood, ok := ctx.Value(key).(string)
	if !ok {
		fmt.Println("invalid tract cood")
	}
LOOP:
	for {
		fmt.Println("tract cood:", tractcood)
		time.Sleep(time.Millisecond * 10)
		select {
		case <-ctx.Done():
			break LOOP
		default:
		}
	}
	fmt.Println("worker done")
	wg.Done()
}

func WithValue() {
	ctx, cancel := context.WithTimeout(context.Background(), time.Millisecond*50)
	ctx = context.WithValue(ctx, TractCood("TRACE_CODE"), "20210629")
	wg.Add(1)
	go valWorker(ctx)
	time.Sleep(time.Second * 5)
	cancel()
	wg.Wait()
	fmt.Println("over")
}

func main() {
	// WithCancel()
	// WithDeadline()
	// WithTimeout()
	WithValue()
}
