package main

import (
	"context"
	"fmt"
	"sync"
	"time"
)

var wg sync.WaitGroup

// 使用自定义
// var exitChan = make(chan bool, 1)

// func f1() {
// 	defer wg.Done()
// FARLOOK:
// 	for {
// 		fmt.Println(time.Now().Format("05"))
// 		time.Sleep(time.Millisecond * 500)
// 		select {
// 		case <-exitChan:
// 			break FARLOOK
// 		default:
// 		}
// 	}
// }

// func main() {
// 	wg.Add(1)
// 	go f1()
// 	time.Sleep(time.Second * 5)
// 	exitChan <- true
// 	wg.Wait()
// }

func f2(ctx context.Context) {
	defer wg.Done()
FARLOOK:
	for {
		time.Sleep(time.Millisecond * 500)
		fmt.Println("f2:", time.Now().Format("05"))
		select {
		case <-ctx.Done():
			break FARLOOK
		default:
		}
	}
}

func f1(ctx context.Context) {
	defer wg.Done()
	go f2(ctx)
FARLOOK:
	for {
		time.Sleep(time.Millisecond * 500)
		fmt.Println("f1:", time.Now().Format("05"))
		select {
		case <-ctx.Done():
			break FARLOOK
		default:
		}
	}
}

func main() {
	ctx, cancel := context.WithCancel(context.Background())
	wg.Add(2)
	go f1(ctx)
	time.Sleep(time.Second * 5)
	cancel()
	wg.Wait()
}
